import { create } from "zustand";
import { persist } from "zustand/middleware";
import { login as apiLogin } from "../features/auth/api";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
interface AuthState {
  isAuthenticated: boolean;
  username: string | null;
  token: string | null;
  login: (username: string, password: string, domain?: string) => Promise<void>;
  logout: () => void;
}
export const useAuthStore = create(
  persist<AuthState>(
    (set) => ({
      isAuthenticated: false,
      username: null,
      token: null,

      login: async (username, password, domain = "orenburg") => {
        try {
          const response = await apiLogin(username, password, domain);
          const token = response.token;
          const user = response.user?.login;

          if (!token || !user) {
            throw new Error("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏");
          }

          set({ isAuthenticated: true, username: user, token });

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º username –∏ session_code –≤ sessionStorage
          sessionStorage.setItem("username", user);
          sessionStorage.setItem("session_code", token); // –ï—Å–ª–∏ session_code —ç—Ç–æ token, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", error);
        }
      },

      logout: () =>
        set({ isAuthenticated: false, username: null, token: null }),
    }),
    { name: "auth-storage" } // üëà –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ localStorage
  )
);
